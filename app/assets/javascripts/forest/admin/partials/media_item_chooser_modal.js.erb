App.MediaItemChooser = {
  instances: [],
  initialize: function($elements) {
    var that = this;

    $(document).one('turbolinks:before-cache.mediaItemChooser', function() {
      that.teardown();
    });

    // Hacky way of removing additional media item choosers. Ideally this could support multiple, or the
    // html could be changed to only allow one at a time.
    $elements.not( $elements.first() ).remove();

    $elements.each(function() {
      var $element = $(this);

      that.instances.push( $element );

      $element
        .on('show.bs.modal', function() {
          var $modalBody = $element.find('.modal-body');

          $.ajax('<%= Rails.application.routes.url_helpers.media_items_path %>')
            .done(function(data) {
              $modalBody.html( $(data).find('.media-library') );
              App.InfiniteLoader.initialize( $element.find('[data-infinite-load]'), { $scrollListener: $element } );
            }).fail(function() {
              var error = 'Unable to fetch media items index.';
              console.warn(error);
              $modalBody.html(error);
            });
        })
        .on('hide.bs.modal', function() {
          that.destroyModal();
        })
        .on('hidden.bs.modal', function() {
          var $modalBody = $element.find('.modal-body');

          $modalBody.empty();
        });
    });
  },
  destroyModal: function() {
    for ( var i = this.instances.length - 1; i >= 0; i-- ) {
      App.InfiniteLoader.unbindScroll( this.instances[i] );
    }
  },
  teardown: function() {
    this.destroyModal();
    for ( var i = this.instances.length - 1; i >= 0; i-- ) {
      this.instances[i].removeClass('fade').modal('hide');
    }
    this.instances = [];
  }
};

App.pageLoad.push(function() {
  App.MediaItemChooser.initialize( $('.media-item-chooser') );
});

$(document).on('click', '[data-media-item-input]', function() {
  App.MediaItemChooser.inputSelector = $(this).attr('data-media-item-input');
  App.MediaItemChooser.toPath = $(this).hasClass('media-item-chooser-to-path');
});

$(document).on('click', '.media-item-chooser .media-library-link', function(e) {
  e.preventDefault();

  var id = $(this).attr('data-media-item-id');
  var imageUrl = $(this).attr('data-image-url');
  var value = App.MediaItemChooser.toPath ? imageUrl : id;
  var $removeButton = $(this).closest('.image').find('.media-item-chooser__remove-image');

  if ( App.MediaItemChooser.inputSelector ) {
    $(App.MediaItemChooser.inputSelector).val( value );
    if ( $(App.MediaItemChooser.inputSelector + '_preview').length )  {
      $(App.MediaItemChooser.inputSelector + '_preview').removeClass('hidden').attr('src', imageUrl);
      $removeButton.removeClass('hidden');
    }
    $(this).closest('.modal').modal('hide');
  }
});

$(document).on('click', '.media-item-chooser__remove-image', function() {
  var $wrapper = $(this).closest('.image');
  var $image = $wrapper.find('.media-item-chooser__image');
  var $button = $wrapper.find('.media-item-chooser__button');
  var $input = $( $button.attr('data-media-item-input') );

  console.log('$button', $button);
  console.log('$input', $input);

  $image.attr('src', '').attr('alt', '').addClass('hidden');
  $input.val('');
  $(this).addClass('hidden');
});
